{"uid":"5a1b0694c0efd85e","name":"Bejelentkezés - Helyes adatokkal","fullName":"test.test_conduit.TestConduit#test_login","historyId":"dfb22bde77ddc1a4db05d8eafb8310d3","time":{"start":1680559593978,"stop":1680559599601,"duration":5623},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x563997fd9243 <unknown>\n#1 0x563997d9d7a6 <unknown>\n#2 0x563997dda64d <unknown>\n#3 0x563997dda761 <unknown>\n#4 0x563997e15da4 <unknown>\n#5 0x563997dfb0ad <unknown>\n#6 0x563997e13932 <unknown>\n#7 0x563997dfae53 <unknown>\n#8 0x563997dcd9ea <unknown>\n#9 0x563997dceb2e <unknown>\n#10 0x56399802dd5e <unknown>\n#11 0x563998031a80 <unknown>\n#12 0x5639980138b0 <unknown>\n#13 0x563998032b63 <unknown>\n#14 0x563998004f75 <unknown>\n#15 0x563998055998 <unknown>\n#16 0x563998055b27 <unknown>\n#17 0x563998070c23 <unknown>\n#18 0x7f6c7712bb43 <unknown>","statusTrace":"self = <test_conduit.TestConduit object at 0x7faf3b219030>\n\n    @allure.id('TC4')\n    @allure.title('Bejelentkezés - Helyes adatokkal')\n    def test_login(self):\n        self.test_cookies_accept()\n    \n        btn_menu_login = self.browser.find_element(By.XPATH, '//a[@href=\"#/login\"]')\n        btn_menu_login.click()\n        input_email = self.browser.find_element(By.XPATH, '//input[@placeholder=\"Email\"]')\n        input_email.send_keys(login_user['username'] + login_user['email'])\n        input_password = self.browser.find_element(By.XPATH, '//input[@placeholder=\"Password\"]')\n        input_password.send_keys(login_user['password'])\n        btn_func_login = self.browser.find_element(By.XPATH,\n                                                     '//button[@class=\"btn btn-lg btn-primary pull-xs-right\"]')\n    \n        assert btn_func_login.is_displayed()\n        assert input_email != \"\"\n        assert input_password != ''\n        assert input_email.get_attribute('value') == login_user['username'] + login_user['email']\n        assert input_password.get_attribute('value') == login_user['password']\n    \n        btn_func_login.click()\n        # time.sleep(3)\n        # btn_menu_logged_in_user = self.browser.find_element(By.XPATH, '//a[@href=\"#/@conduit_test_user_10/\"]')\n>       btn_menu_logged_in_user = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.XPATH, '//a[@href=\"#/@conduit_test_user_10/\"]')))\n\ntest/test_conduit.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ac00816f800950d89f1092613bffa1c9\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7faf3b2c9f30>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x563997fd9243 <unknown>\nE       #1 0x563997d9d7a6 <unknown>\nE       #2 0x563997dda64d <unknown>\nE       #3 0x563997dda761 <unknown>\nE       #4 0x563997e15da4 <unknown>\nE       #5 0x563997dfb0ad <unknown>\nE       #6 0x563997e13932 <unknown>\nE       #7 0x563997dfae53 <unknown>\nE       #8 0x563997dcd9ea <unknown>\nE       #9 0x563997dceb2e <unknown>\nE       #10 0x56399802dd5e <unknown>\nE       #11 0x563998031a80 <unknown>\nE       #12 0x5639980138b0 <unknown>\nE       #13 0x563998032b63 <unknown>\nE       #14 0x563998004f75 <unknown>\nE       #15 0x563998055998 <unknown>\nE       #16 0x563998055b27 <unknown>\nE       #17 0x563998070c23 <unknown>\nE       #18 0x7f6c7712bb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1680559592640,"stop":1680559593977,"duration":1337},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1680559599654,"stop":1680559599710,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"as_id","value":"TC4"},{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az168-318"},{"name":"thread","value":"3084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5a1b0694c0efd85e.json","parameterValues":[]}